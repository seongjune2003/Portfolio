Delgate
Delegate는 함수를 가리키는 변수.

public class DelegateTest : MonoBehaviour
{
    delegate void NumDelegate(int Num);
    NumDelegate Del;
 
    void Start()
    {
        Del = FirstPlus;
        Del(5);
 
        Del = SecondPlus;
        Del(10);
    }
 
    void FirstPlus(int Num)
    {
        int Result = Num * Num;
        Debug.Log("FirstPlus : " + Result);
    }
 
    void SecondPlus(int Num)
    {
        int Result = Num * Num * Num;
        Debug.Log("SecondPlus : " + Result);
    }
}



1. 델리게이트에 연결할 함수의 원형을 정리한다.

delegate void NumDelegate(int Num);

델리게이트 정의 방법은 delegate를 제일 앞에 쓰고 자료형, 델리게이트 함수이름, 그리고(인자 값의 타입(int, string 등)을 써주면 된다.)

2. 델리게이트 변수를 선언해 준다.

NumDelegate Del;

3. 델리게이트에 함수를 연결해준다. 단 함수를 연결할 때 ()를 쓰지 않으니 주의한다.

 Del = FirstPlus;
        Del(5);

Del = SecondPlus;
        Del(10);

함수를 연결한 후에는 함수에 맞는 인자 값을 입력해서 사용하면 된다.


- 그렇다면 Delegate를 왜 쓰는 것인가?

이벤트를 작성할 때 관련된 함수를 한번에 불러오는 기능이라고 생각하면 됨.

예를 들어서 인벤토리가 업데이트 됐을 때 실행되어야 하는 함수들 다 체인걸어놓고 트리거 발동됐을 때 델리게이트 호출하면 관련된 함수들을 다 불러오는 식으로 사용. (기본적인 용도)

Delegate를 쓰는 주된 이유는 한 클래스에서 다른 클래스로의 직접적인 접근이 불필요하고, 함수 이름도 알 필요가 없기 때문임.

예를 들어 적을 해치웠을 때, 스코어와 골드를 획득 한다고 하면 델리게이트를 안 썼을 경우 GameManager.Instance.ScoreUp(value); InventoryManager.Instance.GoldUp(value); 이런 식으로 직접적인 접근과 호출이 필요한데 델리게이트를 쓴다고하면 사용하는 쪽에서 EnemyKillEvent(value); 이런식으로 함수를 한번만 써놓고 GameManager와 InventoryManager클래스에서 사용하는 함수를 EnemyKillEvent 이벤트에 등록만 시켜주면 되기 때문.

특히 혼자 개발할 때가 아니라 팀으로 개발했다고 생각해보자. 팀원 각자 A 클래스, B클래스를 구현하는데 A클래스에선 B 클래스가 구현되기 전까지 B클래스 함수를 알 방법이 없다. 그래서 매개변수로 함수 자체를 받는 것. 그걸 실행한다고 써놓으면 서로가 서로에게 병목이 안 생기면서 각자 구현할 수 있음.

디커플링과 분리를 위해 쓴다. (해당 내용은 다른 문서에서 자세히 정리해두자)




# 무명메서드

기존에 delegate가 기존에 있던 함수를 이용하는 거라면 무명메서드는 미리 정의하지 않아도 되는 메서드 명이 없는 무명메서드.

일회용으로 단순한 명령어 구문으로 구성된 메서드들을 별도의 메서드를 정의하지 않고, 델리게이트를 이용해 일회성 메서드를 정의할 수 있다. 메서드 명이 없는 메서드를 무명메서드라고 한다.

무명 메서드를 만들기 위해서는 delegate 키워드와 함께 매개변수와 명령어 구문을 정의하면 된다.

무명메서드는 외간상 인라인(inline methode)형식을 띄며, 무명 메서드 자체를 delegate 타입 변수에 할당한다.

- 무명메서드 정의 형식

접근한정자 delegate 반환형 델리게이트형명(매개변수);

델리게이트형명 델리게이트변수명 = delegate(매개변수) {명령어구문};


private delegate void del(int value);
del _del = delegate(int value)
{
			Console.Write(value);
};

_del(100);



# 람다식

무명메서드와 비슷하게 무명 함수를 쓸 때 사용한다. ⇒ 왼쪽에 입력 파라미터, 오른쪽에 실행 문장을 입력한다.

람다식 문법 : (입력 파라미터) => { 실행문장 블럭 };

문자열을 입력 받아 메시지 박스에 띄우려면 아래와 같은 형태가 될 것이다.

str => { MessageBox.Show(str); }

입력 파라미터의 갯수는 하나도 없는 경우부터 여러 개 있는 경우까지 다양하다.


// 입력 파라미터가 없는 경우
() => Write("No");

// 입력 파라미터가 1~2개 있는 경우
(p) => Write(p);
(s, e) => { Write(s); Write(e); }

// 입력 파라미터 타입을 명시하는 경우
(string s, int i) => Write(s, i);


람다식(Lambda Expression)을 이용하면 delgate 와 무명 메서드를 더 간략히 표현할 수 있다. 예를 들어 다음과 같은 Click 이벤트는 이벤트 핸들러 메서드인 button1_Click를 추가하고 있는데, 그래서 메서드 button1_Click은 해당 클래스 내 어딘가에 정의되어 있어야 한다.

this.button1.Click += new System.EventHandler(button1_Click);

private void button1_Click(object sender, EventArgs e)
{
   ((Button)sender).BackColor = Color.Red;
}


위의 new System.EventHandler(button1_Click)은 간단히 button1_Click 메서드명만 사용하여 아래와 같이 줄일 수 있다.

this.button1.Click += button1_Click;


이를 좀더 간단하게 하려면 아래와 같이 무명 메서드(Anonymous Method)를 써서 표현할 수 있다.

this.button1.Click += delegate(object sender, EventArgs e)
{
   ((Button)sender).BackColor = Color.Red;
};


그리고 람다식을 사용하면 이를 더 간단히 다음과 같이 바꿀 수 있다. 람다식의 오른쪽 실행 블럭이 한 문장일 때는 { } 괄호를 생략할 수 있다. 아래 식은 무명 메서드를 쉽게 람다식으로 변경한 간단한 예이다.

// 간단한 이벤트핸들러를 람다식으로 표현한 경우

this.button1.Click += (sender, e) => ((Button)sender).BackColor = Color.Red;
